/*
  Copyright (c) 2022-, Germano Rizzo <oss@germanorizzo.it>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package ws4sqlite_client

import (
	"errors"
)

const k_TRX = "transaction"
const k_QUERY = "query"
const k_STATEMENT = "statement"
const k_NO_FAIL = "noFail"
const k_VALUES = "values"
const k_BATCH = "valuesBatch"
const k_ENCODER = "encoder"
const k_DECODER = "decoder"
const k_PASSWORD = "pwd"
const k_Z_LEVEL = "compressionLevel"
const k_COLUMNS = "columns"

type RequestBuilder struct {
	err  string
	list []interface{}
	temp map[string]interface{}
}

type Request struct {
	mmap map[string]interface{}
}

func mapContains(mmap map[string]interface{}, key string) bool {
	_, ret := mmap[key]
	return ret
}

func NewRequestBuilder() *RequestBuilder {
	return &RequestBuilder{list: make([]interface{}, 0)}
}

func (rb *RequestBuilder) AddQuery(query string) *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	if rb.temp != nil {
		rb.list = append(rb.list, rb.temp)
	}
	rb.temp = make(map[string]interface{})
	rb.temp[k_QUERY] = query
	return rb
}

func (rb *RequestBuilder) AddStatement(statement string) *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	if rb.temp != nil {
		rb.list = append(rb.list, rb.temp)
	}
	rb.temp = make(map[string]interface{})
	rb.temp[k_STATEMENT] = statement
	return rb
}

func (rb *RequestBuilder) WithNoFail() *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	rb.temp[k_NO_FAIL] = true
	return rb
}

func (rb *RequestBuilder) WithValues(values map[string]interface{}) *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	if values == nil {
		rb.err = "cannot specify a null argument"
		return rb
	}
	if mapContains(rb.temp, k_QUERY) && (mapContains(rb.temp, k_VALUES) || mapContains(rb.temp, k_BATCH)) {
		rb.err = "cannot specify a batch for a query"
		return rb
	}
	if mapContains(rb.temp, k_BATCH) {
		batch := rb.temp[k_BATCH].([]map[string]interface{})
		rb.temp[k_BATCH] = append(batch, values)
	} else if mapContains(rb.temp, k_VALUES) {
		curValues := rb.temp[k_VALUES].(map[string]interface{})
		delete(rb.temp, k_VALUES)
		rb.temp[k_BATCH] = []map[string]interface{}{curValues, values}
	} else {
		rb.temp[k_VALUES] = values
	}
	return rb
}

func (rb *RequestBuilder) WithEncoderAndCompression(password string, compressionLevel int, columns ...string) *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	if compressionLevel < 1 || compressionLevel > 19 {
		rb.err = "compressionLevel must be between 1 and 19"
		return rb
	}
	if len(columns) <= 0 {
		rb.err = "cannot specify an empty columns list"
		return rb
	}
	if mapContains(rb.temp, k_QUERY) {
		rb.err = "cannot specify an encoder for a query"
		return rb
	}
	rb.temp[k_ENCODER] =
		map[string]interface{}{
			k_PASSWORD: password,
			k_Z_LEVEL:  compressionLevel,
			k_COLUMNS:  columns,
		}
	return rb
}

func (rb *RequestBuilder) WithEncoder(password string, columns ...string) *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	if len(columns) <= 0 {
		rb.err = "cannot specify an empty columns list"
		return rb
	}
	if mapContains(rb.temp, k_QUERY) {
		rb.err = "cannot specify an encoder for a query"
		return rb
	}
	rb.temp[k_ENCODER] =
		map[string]interface{}{
			k_PASSWORD: password,
			k_COLUMNS:  columns,
		}
	return rb
}

func (rb *RequestBuilder) WithDecoder(password string, columns ...string) *RequestBuilder {
	if rb.err != "" {
		return rb
	}
	if len(columns) <= 0 {
		rb.err = "cannot specify an empty columns list"
		return rb
	}
	if mapContains(rb.temp, k_STATEMENT) {
		rb.err = "cannot specify a decoder for a statement"
		return rb
	}
	rb.temp[k_DECODER] =
		map[string]interface{}{
			k_PASSWORD: password,
			k_COLUMNS:  columns,
		}
	return rb
}

func (rb *RequestBuilder) Build() (*Request, error) {
	if rb.temp == nil {
		return nil, errors.New("there are no requests")
	}
	if rb.err != "" {
		return nil, errors.New(rb.err)
	}
	mmap := map[string]interface{}{k_TRX: rb.list}
	return &Request{mmap}, nil
}
